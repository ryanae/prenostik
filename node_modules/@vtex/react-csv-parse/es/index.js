import _default9 from 'ramda/src/splitAt';
import _default8 from 'ramda/src/zipObj';
import _default7 from 'ramda/src/lift';
import _default6 from 'ramda/src/apply';
import _default5 from 'ramda/src/compose';
import _default4 from 'ramda/src/dropLast';
import _default3 from 'ramda/src/last';
import _default2 from 'ramda/src/isEmpty';
import _default from 'ramda/src/splitEvery';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';

// NOTES
// Separator is the character splitting the data. Comma ex.: 1,2,3
// Delimiter is a text delimiter. Double quotes ex.: "Account", "Id"

var CsvParse = function (_React$Component) {
  _inherits(CsvParse, _React$Component);

  function CsvParse() {
    var _temp, _this, _ret;

    _classCallCheck(this, CsvParse);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnChange = function (event) {
      var file = event.target.files[0];
      _this.handleSeparators(file);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  CsvParse.prototype.handleSeparators = function handleSeparators(file) {
    var _this2 = this;

    var reader = new FileReader();
    reader.readAsText(file);
    reader.onload = function () {
      var result = reader.result;
      var splitResult = result.split('');

      // check if first character is not alphanumeric
      if (!splitResult[0].match(/^[a-z0-9]+$/i, 'g')) {
        // get index of second delimiter
        var secondDelimiterIndex = result.indexOf(splitResult[0], 1);

        // separator is character after second delimiter
        var separator = result[secondDelimiterIndex + 1];

        // clean text delimiters
        var delimiter = splitResult[0];
        var dynamicRegEx = new RegExp(delimiter, 'g');
        result = result.replace(dynamicRegEx, '');

        // start parsing
        _this2.parseData(result, separator);
      } else {
        // first character is alphanum, guessing the separator
        _this2.props.separators.some(function (val, i) {
          var dynamicRegEx = new RegExp(_this2.props.separators[i], 'g');
          var separatorsFound = (result.match(dynamicRegEx) || []).length;
          if (separatorsFound >= _this2.props.keys.length) {
            _this2.parseData(result, _this2.props.separators[i]);
            return true;
          } else if (i === _this2.props.separators.length - 1) {
            _this2.props.onDataUploaded(null);
          }
        });
      }
    };
  };

  CsvParse.prototype.parseData = function parseData(result, separator) {
    // replace line breaks and tabs by separator
    result = result.replace(/[\r\n\t]/g, separator);

    // split string by separator
    result = result.split(separator);

    // create arrays at each headers' length string
    result = _default(this.props.keys.length, result);

    // drop last item if empty
    if (_default2(_default3(result)[0])) {
      result = _default4(1, result);
    }

    // remove display headers
    result.shift();

    // add api headers
    result.unshift(this.props.keys);

    // convert arrays to objects
    result = _default5(_default6(_default7(_default8)), _default9(1))(result);

    // save it all in state
    this.props.onDataUploaded(result);
  };

  CsvParse.prototype.render = function render() {
    return this.props.render(this.handleOnChange);
  };

  return CsvParse;
}(React.Component);

CsvParse.defaultProps = {
  separators: [',', ';']
};

CsvParse.propTypes = process.env.NODE_ENV !== "production" ? {
  keys: PropTypes.array.isRequired,
  onDataUploaded: PropTypes.func.isRequired,
  separators: PropTypes.array
} : {};

export default CsvParse;